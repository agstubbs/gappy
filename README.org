* gappy
Intention: Build Clojure bindings for Google APIs from [[https://developers.google.com/discovery/][Google Discovery API]]

* Design

** Other Language Bindings for Google APIs
Looking at the other language bindings that exist, conceptually, each API is split into a number of different Resources, each Resource having a number of functions associated with it, and this is basically in line with the structure of the discovery document. Compare and contrast.

Looking at the sample code from the [[https://developers.google.com/admin-sdk/directory/v1/get-start/getting-started][Google Workspace Admin SDK Directory API Get Started documentation]] we can see an idiom that crosses several languages.

*** Python
#+begin_src python
  service.users().list(customer='my_customer', maxResults=10,
                                  orderBy='email').execute()
#+end_src

*** Java
#+begin_src java
  service.users().list()
                  .setCustomer("my_customer")
                  .setMaxResults(10)
                  .setOrderBy("email")
                  .execute();
#+end_src

*** JavaScript
#+begin_src javascript
  var optionalArgs = {
      customer: 'my_customer',
      maxResults: 10,
      orderBy: 'email'
    };
  var response = AdminDirectory.Users.list(optionalArgs);
#+end_src

*** Go
#+begin_src go
  r, err := srv.Users.List().Customer("my_customer").MaxResults(10).
                  OrderBy("email").Do()
#+end_src

*** Ruby
Ruby is the outlier.

#+begin_src ruby
  response = service.list_users(customer:    "my_customer",
                                max_results: 10,
                                order_by:    "email")
#+end_src

** Cognitect example: AWS API

Cognitect's bindings for AWS API are generated using the data descriptions from the [[https://github.com/aws/aws-sdk-js/][AWS JavaScript library]]. 

* Dependencies

- clojure :: https://github.com/clojure/clojure
- core async :: https://github.com/clojure/core.async
- cprop :: https://github.com/tolitius/cprop
- mount :: https://github.com/tolitius/mount
- cheshire :: https://github.com/dakrone/cheshire
- uritemplate-clj :: https://github.com/mwkuster/uritemplate-clj
- clj-http :: https://github.com/dakrone/clj-http
- ring :: https://github.com/ring-clojure/ring
- ring-http-response :: https://github.com/metosin/ring-http-response
- log4j :: https://logging.apache.org/log4j/2.x/index.html

